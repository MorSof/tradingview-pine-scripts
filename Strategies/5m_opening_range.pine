//@version=5
strategy("5m Opening Range Strategy (1R:2R) + Visuals", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=100)

// ─── INPUTS ─────────────────────────
r_dollars = input.float(30, "Risk per trade ($)")
r_multiple = input.int(1, "Reward Multiple", minval=1)
high_proximity_buffer = input.float(0.005, "High Proximity Threshold (e.g., 0.005 = 0.5%)")
show_debug_labels = input.bool(true, "Show Debug Labels")
show_first_candle = input.bool(true, "Show First Candle")
show_second_candle = input.bool(true, "Show Second Candle")
show_third_candle = input.bool(true, "Show Third Candle")

// ─── MA + ATR SETUP ────────────────
ma20 = ta.sma(close, 20)
ma200 = ta.sma(close, 200)
daily_atr = request.security(syminfo.tickerid, "D", ta.atr(14))
prev_close = request.security(syminfo.tickerid, "D", close)
yest_low = request.security(syminfo.tickerid, "D", low)
yest_high = request.security(syminfo.tickerid, "D", high)

// ─── TODAY'S LOW BASED ON 5M CHART ─
is_new_day = ta.change(time("D")) != 0
var float today_low_5m = na
today_low_5m := is_new_day ? low : math.min(today_low_5m, low)

// ─── PRICE RANGE LOGIC ─────────────
price_range_base = math.min(prev_close, today_low_5m)
max_price_up = price_range_base + daily_atr

// ─── TIME FILTER: FIRST 15 MINUTES ─
candle_number = (hour == 9 and minute >= 30 and minute < 35) ? 1 : (hour == 9 and minute >= 35 and minute < 40) ? 2 : (hour == 9 and minute >= 40 and minute < 45) ? 3 : na


// ─── CANDLE DISPLAY FILTER ─────────
show_current_candle = (candle_number == 1 and show_first_candle) or
                      (candle_number == 2 and show_second_candle) or
                      (candle_number == 3 and show_third_candle)

// ─── TRACK HIGHS FOR CANDLES 1 & 2 ──
var float high_c1 = na
var float high_c2 = na
high_c1 := is_new_day or candle_number == 1 ? high : high_c1
high_c2 := is_new_day or candle_number == 2 ? high : high_c2

// ─── ENTRY CONDITION COMPONENTS ────
near_yest_high_and_not_breaking = (yest_high - close) / close <= high_proximity_buffer and close <= yest_high
bool_cond_open_close = close > open
bool_cond_tail_ok = (high - close) <= (high - low) * 0.25
bool_ma_order = close > ma20 and ma20 > ma200
bool_above_prev_close = close > prev_close
bool_candle_progression = (candle_number == 1) or
                          (candle_number == 2 and close > high_c1) or
                          (candle_number == 3 and close > high_c1 and close > high_c2)
bool_time_valid = (hour == 9 and minute >= 30 and minute < 45)
bool_within_atr_target = (close - price_range_base + r_multiple * (close - price_range_base)) <= daily_atr
bool_within_r_dollars = (close - price_range_base) <= r_dollars
bool_not_near_yhigh = not near_yest_high_and_not_breaking

// ─── ENTRY SIGNAL ──────────────────
enter_long = bool_cond_open_close and
             bool_cond_tail_ok and
             bool_ma_order and
             bool_above_prev_close and
             bool_candle_progression and
             bool_time_valid and
             bool_within_atr_target and
             bool_within_r_dollars and
             bool_not_near_yhigh

// ─── STOP LOSS WITH BUFFER ─────────
use_yest_low = (close - yest_low) / close <= 0.01
stop_buffer = daily_atr * 0.1
raw_stop = use_yest_low ? yest_low : math.min(prev_close, today_low_5m)
initial_stop_loss = raw_stop - stop_buffer

// ─── RISK & REWARD ─────────────────
risk_per_share = close - initial_stop_loss
position_size = r_dollars / risk_per_share
position_size_rounded = math.floor(position_size)
initial_take_profit = math.min(close + r_multiple * risk_per_share, max_price_up)

// ─── POSITION MANAGEMENT VARIABLES ─
var int entry_bar_index = na
var int last_adjustment_bar = na
var float dynamic_tp = na
var float dynamic_sl = na
var bool in_trade = false

if enter_long
    strategy.entry("Long", strategy.long, qty=position_size_rounded)
    entry_bar_index := bar_index
    last_adjustment_bar := na
    dynamic_tp := initial_take_profit
    dynamic_sl := initial_stop_loss
    in_trade := true

if strategy.position_size == 0
    entry_bar_index := na
    last_adjustment_bar := na
    dynamic_tp := na
    dynamic_sl := na
    in_trade := false

// ─── TP/SL UPDATE EVERY HOUR AFTER 2 HOURS ─
bars_since_entry = bar_index - entry_bar_index
lookback_bars = 12

should_adjust = in_trade and not na(entry_bar_index) and bars_since_entry >= 24 and (na(last_adjustment_bar) or bar_index - last_adjustment_bar >= 12)

last_hour_high = ta.highest(high, lookback_bars)
last_hour_low = ta.lowest(low, lookback_bars)

if should_adjust
    dynamic_tp := last_hour_high
    dynamic_sl := last_hour_low
    last_adjustment_bar := bar_index

// ─── SINGLE DYNAMIC EXIT ───────────
if in_trade
    strategy.exit("Dynamic TP/SL", from_entry="Long", limit=dynamic_tp, stop=dynamic_sl)

// ─── PLOTS ─────────────────────────
plot(ma20, color=color.orange, title="MA 20")
plot(ma200, color=color.blue, title="MA 200")
plotshape(enter_long and show_current_candle, title="Entry", location=location.belowbar, color=color.green, style=shape.triangleup, size=size.small)
plot(prev_close, "Previous Close", color=color.white, linewidth=1, style=plot.style_line)
plot(yest_low, "Yesterday Low", color=color.red, linewidth=1, style=plot.style_line)
plot(yest_high, "Yesterday High", color=color.green, linewidth=1, style=plot.style_line)
plot(max_price_up, "Expected Max Up (ATR)", color=color.aqua, linewidth=1, style=plot.style_line)
plot(in_trade ? dynamic_tp : na, title="Adjusted TP", color=color.lime, linewidth=2, style=plot.style_linebr)
plot(in_trade ? dynamic_sl : na, title="Adjusted SL", color=color.red, linewidth=2, style=plot.style_linebr)

// ─── DEBUG LABELS FOR FIRST 3 CANDLES ─────
if show_debug_labels and show_current_candle
    label_text = "Candle: " + str.tostring(candle_number) + 
                 "\nBullish candle: " + (bool_cond_open_close ? "✅" : "❌") +
                 "\nUpper tail OK: " + (bool_cond_tail_ok ? "✅" : "❌") +
                 "\nMA alignment (20 > 200): " + (bool_ma_order ? "✅" : "❌") +
                 "\nAbove previous close: " + (bool_above_prev_close ? "✅" : "❌") +
                 "\nCandle breakout logic: " + (bool_candle_progression ? "✅" : "❌") +
                 "\nWithin ATR target: " + (bool_within_atr_target ? "✅" : "❌") +
                 "\nRisk within $" + str.tostring(r_dollars) + ": " + (bool_within_r_dollars ? "✅" : "❌") +
                 "\nNot near yesterday's high: " + (bool_not_near_yhigh ? "✅" : "❌") +
                 "\n📦 Position size: " + str.tostring(position_size_rounded) +
                 "\n🎯 Take Profit: " + str.tostring(initial_take_profit, "#.##") +
                 "\n🧯 Stop Loss: " + str.tostring(initial_stop_loss, "#.##")

    label.new(bar_index, low, label_text, yloc=yloc.belowbar, style=label.style_label_down, color=color.new(color.gray, 0), textcolor=color.white, size=size.small)
